name: Release

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'

defaults:
  run:
    shell: bash

jobs:
  build:
    strategy:
      fail-fast: true
      matrix:
        platform: [ ubuntu-22.04, ubuntu-latest, windows-latest, windows-2019, macos-latest ]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Install zip
        if: matrix.platform == 'windows-latest' || matrix.platform == 'windows-2019'
        run: powershell.exe -Command "choco install zip"
      - name: Remove the default Go installation
        if: matrix.platform == 'windows-latest' || matrix.platform == 'windows-2019'
        shell: pwsh
        run: |
          $go_path = (Get-Command go).Source
          Write-Host "Removing Go executable from: $go_path"
          Remove-Item -Force $go_path
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.x
          check-latest: true
      - name: Install Go tip
        run: |
          set -x
          
          # Set up some control variables
          MAX_RETRIES=2
          RETRY_COUNT=0
          SUCCESS=0

          while [ $RETRY_COUNT -le $MAX_RETRIES ]; do
            # Run the command and capture both stdout and stderr
            OUTPUT=$( { go install golang.org/dl/gotip@latest && gotip download; } 2>&1 )
          
            # We still want to see the output as part of the job output
            echo "$OUTPUT"
            
            # Check if the error "exit status 1" is present in the output
            if echo "$OUTPUT" | grep -q "exit status 1"; then
              echo "Detected 'exit status 1' error, retrying... ($((RETRY_COUNT+1))/$MAX_RETRIES)"
              RETRY_COUNT=$((RETRY_COUNT+1))
            else
              SUCCESS=1
              break
            fi
          done
          
          # Exit with error if still unsuccessful after retries
          if [ $SUCCESS -eq 0 ]; then
            echo "Failed to install Go tip after $MAX_RETRIES attempts."
            exit 1
          fi
      - name: Zip Go installation
        run: |
          set -x
          cd $HOME/sdk/
          zip -r $GITHUB_WORKSPACE/go.zip gotip
      - name: Upload Go tip artifact
        uses: actions/upload-artifact@v4
        with:
          name: go-zip-${{ matrix.platform }}
          path: ${{ github.workspace }}/go.zip
          if-no-files-found: error

  test:
    needs: build
    strategy:
      fail-fast: true
      matrix:
        platform: [ ubuntu-22.04,  ubuntu-latest, windows-latest, windows-2019, macos-latest ]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Download Go tip artifact
        uses: actions/download-artifact@v4
        with:
          name: go-zip-${{ matrix.platform }}
      - name: Install Go tip
        run: |
          set -x
          unzip go.zip -d $HOME/sdk
          echo "GOROOT=$HOME/sdk/gotip" >> "$GITHUB_ENV"
          echo "GOPATH=$HOME/go" >> "$GITHUB_ENV"
          echo "$HOME/go/bin" >> "$GITHUB_PATH"
          echo "$HOME/sdk/gotip/bin" >> "$GITHUB_PATH"
      - name: Test Go
        run: |
          set -x
          echo "$PATH"
          which go
          go_version_output=$(go version)
          echo "$go_version_output"
          if ! echo "$go_version_output" | grep -q "go version devel"; then
            echo "Go version is not devel"
            exit 1
          fi

  release:
    needs: test
    strategy:
      fail-fast: true
      matrix:
        platform: [ ubuntu-22.04,  ubuntu-latest, windows-latest, windows-2019, macos-latest ]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Download Go tip artifact
        uses: actions/download-artifact@v4
        with:
          name: go-zip-${{ matrix.platform }}
      - name: Release
        uses: marvinpinto/action-automatic-releases@919008cf3f741b179569b7a6fb4d8860689ab7f0 # v1.2.1
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "${{ matrix.platform }}"
          prerelease: false
          files: |
            go.zip

  slack:
    runs-on: ubuntu-latest
    needs: [ build, test, release ]
    if: ${{ always() && contains(join(needs.*.result, ','), 'failure') }}
    steps:
      - name: Slack on failure
        id: slack
        uses: slackapi/slack-github-action@37ebaef184d7626c5f204ab8d3baff4262dd30f0 # v1.27.0
        with:
          payload: |
            {
              "text": "grafana/gotip release failed",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "The `grafana/gotip` periodic release has *failed* :thinking_face:\n\nPlease check the release process for details:\n ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
